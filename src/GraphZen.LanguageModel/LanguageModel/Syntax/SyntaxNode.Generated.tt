<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
/*
var nodeTypes = typeof(Node).Assembly.GetTypes()
                .Where(typeof(Node).IsAssignableFrom)
                .Where(_ => !_.IsAbstract)
                .Select(_ => _.Name)
                .OrderBy(_ => _);
				*/

var nodeTypes = new [] {

"Argument",
"BooleanValue",
"DirectiveDefinition",
"Directive",
"Document",
"EnumTypeDefinition",
"EnumTypeExtension",
"EnumValueDefinition",
"EnumValue",
"FieldDefinition",
"Field",
"FloatValue",
"FragmentDefinition",
"FragmentSpread",
"InlineFragment",
"InputObjectTypeDefinition",
"InputObjectTypeExtension",
"InputValueDefinition",
"InterfaceTypeDefinition",
"InterfaceTypeExtension",
"IntValue",
"ListType",
"ListValue",
"NamedType",
"Name",
"NonNullType",
"NullValue",
"ObjectField",
"ObjectTypeDefinition",
"ObjectTypeExtension",
"ObjectValue",
"OperationDefinition",
"OperationTypeDefinition",
"Punctuator",
"ScalarTypeDefinition",
"ScalarTypeExtension",
"SchemaDefinition",
"SchemaExtension",
"SelectionSet",
"StringValue",
"UnionTypeDefinition",
"UnionTypeExtension",
"VariableDefinition",
"Variable"


};
#>
using System;
using System.Collections.Generic;
using System.Text;



namespace GraphZen.LanguageModel
{

    public enum SyntaxKind {
	
<# foreach(var nodeName in nodeTypes) { #>
 /// <summary>Indicates an <see cref="<#= nodeName #>Syntax"/> node.</summary>
<#= nodeName #>,

<# } #>
	
	}
    
<# foreach(var nodeName in nodeTypes) { #>
    public sealed partial class <#= nodeName #>Syntax {

		/// <summary>Empty, read-only list of <see cref="<#= nodeName #>Syntax"/> nodes.</summary>
		
		
		public static IReadOnlyList<<#= nodeName #>Syntax> EmptyList {get;} = new List<<#= nodeName #>Syntax>(0).AsReadOnly();

		/// <summary>Called when a <see cref="GraphQLSyntaxVisitor"/> enters a <see cref="<#= nodeName #>Syntax"/> node.</summary>
		public override void VisitEnter( GraphQLSyntaxVisitor visitor) => visitor.Enter<#= nodeName #>(this);
		/// <summary>Called when a <see cref="GraphQLSyntaxVisitor"/> leaves a <see cref="<#= nodeName #>Syntax"/> node.</summary>
		public override void VisitLeave( GraphQLSyntaxVisitor visitor) => visitor.Leave<#= nodeName #>(this);
		/// <summary>Called when a <see cref="GraphQLSyntaxVisitor{TResult}"/> enters a <see cref="<#= nodeName #>Syntax"/> node.</summary>
		public override TResult VisitEnter<TResult>( GraphQLSyntaxVisitor<TResult> visitor) => visitor.Enter<#= nodeName #>(this);
		/// <summary>Called when a <see cref="GraphQLSyntaxVisitor{TResult}"/> leaves a <see cref="<#= nodeName #>Syntax"/> node.</summary>
		public override TResult VisitLeave<TResult>( GraphQLSyntaxVisitor<TResult> visitor) => visitor.Leave<#= nodeName #>(this);
		public override SyntaxKind Kind {get;} = SyntaxKind.<#= nodeName #>;
		
    }
<# } #>




 
}

