<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
/*
var nodeTypes = typeof(Node).Assembly.GetTypes()
                .Where(typeof(Node).IsAssignableFrom)
                .Where(_ => !_.IsAbstract)
                .Select(_ => _.Name)
                .OrderBy(_ => _);
				*/

var nodeTypes = new [] {

"Argument",
"BooleanValue",
"DirectiveDefinition",
"Directive",
"Document",
"EnumTypeDefinition",
"EnumTypeExtension",
"EnumValueDefinition",
"EnumValue",
"FieldDefinition",
"Field",
"FloatValue",
"FragmentDefinition",
"FragmentSpread",
"InlineFragment",
"InputObjectTypeDefinition",
"InputObjectTypeExtension",
"InputValueDefinition",
"InterfaceTypeDefinition",
"InterfaceTypeExtension",
"IntValue",
"ListType",
"ListValue",
"NamedType",
"Name",
"NonNullType",
"NullValue",
"ObjectField",
"ObjectTypeDefinition",
"ObjectTypeExtension",
"ObjectValue",
"OperationDefinition",
"OperationTypeDefinition",
"Punctuator",
"ScalarTypeDefinition",
"ScalarTypeExtension",
"SchemaDefinition",
"SchemaExtension",
"SelectionSet",
"StringValue",
"UnionTypeDefinition",
"UnionTypeExtension",
"VariableDefinition",
"Variable"


};
#>
using GraphZen.Infrastructure;  
  


namespace GraphZen.LanguageModel
{
    public abstract partial class GraphQLSyntaxVisitor
    {<# foreach(var nodeName in nodeTypes) { #>

        /// <summary>Called when the visitor enters a <see cref="<#= nodeName #>Syntax"/> node.</summary>
        public virtual void Enter<#= nodeName #>([NotNull] <#= nodeName #>Syntax node) => OnEnter(node);

        /// <summary>Called when the visitor leaves a <see cref="<#= nodeName #>Syntax"/> node.</summary>
        public virtual void Leave<#= nodeName #>([NotNull] <#= nodeName #>Syntax node) => OnLeave(node);
<# } #>
    }

    public abstract partial class GraphQLSyntaxVisitor<TResult>
    {<# foreach(var nodeName in nodeTypes) { #>

        /// <summary>Called when the visitor enters a <see cref="<#= nodeName #>Syntax"/> node.</summary>
        public virtual TResult Enter<#= nodeName #>([NotNull] <#= nodeName #>Syntax node) => OnEnter(node);

        /// <summary>Called when the visitor leaves a <see cref="<#= nodeName #>Syntax"/> node.</summary>
        public virtual TResult Leave<#= nodeName #>([NotNull] <#= nodeName #>Syntax node) => OnLeave(node);
<# } #>
    }
}
